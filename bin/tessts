#!/usr/bin/env python
"""Script to search for exoplanet transits from SPOC TESS light curves.

"""

#  OpenTS: Open exoplanet transit search pipeline.
#  Copyright (C) 2015-2020  Hannu Parviainen
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.

from pathlib import Path
from argparse import ArgumentParser
from mpi4py import MPI
from tqdm import tqdm

from opents.tesstransitsearch import TESSTransitSearch

def read_data_directory(ddir: Path, tic: int = None, tic_pattern: str = '*'):
    if tic is not None:
        tic_pattern = f'*{tic}*'
    files = sorted(ddir.glob(f'tess*-s*-{tic_pattern}-*s_lc.fits'))
    tic_files = {}
    for f in files:
        tic = int(f.name.split('-')[2])
        if not tic in tic_files:
            tic_files[tic] = []
        tic_files[tic].append(f)
    return tic_files


if __name__ == '__main__':
    ap = ArgumentParser()
    ap.add_argument('--tic', type=int, default=None)
    ap.add_argument('--tic-pattern', type=str, default="*")
    ap.add_argument('--max-planets', type=int, default=5)
    ap.add_argument('--data-dir', default='.', type=Path)
    ap.add_argument('--save-dir', default='.', type=Path)
    ap.add_argument('--plot-dir', default='.', type=Path)
    ap.add_argument('--dont-plot', dest='plot', action='store_false', default=True)
    ap.add_argument('--plot-format', type=str, default='pdf', choices=['pdf', 'png'], help='File format for plots')
    ap.add_argument('--bic-limit', type=float, default=5)
    args = ap.parse_args()

    root = 0
    comm = MPI.COMM_WORLD
    rank = comm.Get_rank()
    size = comm.Get_size()
    is_root = rank == root

    if size < 2:
        print("Error, at least one worker node required.\nStart with mpirun -n N_WORKER_NODES+1 tessts")
        sys.exit(1)

    ddata = args.data_dir
    if not ddata.exists():
        raise FileNotFoundError(f"The data directory  {ddata} doesn't exist")

    # Master node
    # -----------
    if is_root:
        files = read_data_directory(ddata, tic=args.tic, tic_pattern=args.tic_pattern)
        tics = sorted(files.keys())

        free_workers = list(range(1, size))
        active_workers = []

        n_files = len(tics)
        n_finished_files = 0
        with tqdm(desc='TESS Transit Search', total=n_files) as pbar:
            while tics or active_workers:
                while tics and free_workers:
                    w = free_workers.pop(0)
                    comm.send(files[tics.pop(0)], dest=w, tag=0)
                    active_workers.append(w)

                for w in active_workers:
                    if comm.Iprobe(w, 2):
                        free_workers.append(w)
                        active_workers.remove(w)
                        n_finished_files += 1
                        pbar.update(1)

            for w in free_workers:
                comm.send(-1, dest=w, tag=0)

    # Worker node
    # -----------
    else:
        while True:
            fname = comm.recv(source=root, tag=0)
            if fname == -1:
                break

            ts = TESSTransitSearch(bic_limit=args.bic_limit, use_tqdm=False)
            ts.read_data(fname)
            for i in range(args.max_planets):
                ts.run()
                f = ts._create_fits()
                f.writeto(args.save_dir / f"{ts.name}_{ts.planet}.fits", overwrite=True)

                if args.plot:
                    fig = ts.plot_report()
                    fig.savefig(args.plot_dir / f"{ts.name}_{ts.planet}.png")

                if ts.dbic > args.bic_limit:
                    ts.next_planet()
                else:
                    break

            comm.send(1, dest=root, tag=2)

