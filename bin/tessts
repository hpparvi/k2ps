#!/usr/bin/env python
"""Script to search for transit-like signals from k2sc-detrended K2 light curves.

"""
import sys
from copy import copy

import matplotlib as mpl

mpl.use('AGG')
import matplotlib.pyplot as pl
import pandas as pd

from pathlib import Path
from os.path import join, abspath
from collections import OrderedDict
from argparse import ArgumentParser
from time import time
from mpi4py import MPI

from opents.tesstransitsearch import TESSTransitSearch

if __name__ == '__main__':
    ap = ArgumentParser()
    ap.add_argument('run_name', type=str)
    ap.add_argument('--data-dir', default='.', type=Path)
    ap.add_argument('--save-dir', default='.', type=Path)
    ap.add_argument('--plot-dir', default='.', type=Path)
    ap.add_argument('--dont-plot', dest='plot', action='store_false', default=True)
    ap.add_argument('--plot-format', type=str, default='pdf', choices=['pdf', 'png'], help='File format for plots')
    ap.add_argument('--start-i', default=0, type=int)
    ap.add_argument('--end-i', default=None, type=int)
    args = ap.parse_args()

    root = 0
    comm = MPI.COMM_WORLD
    rank = comm.Get_rank()
    size = comm.Get_size()
    is_root = rank == root

    if size < 2:
        print("Error, at least one worker node required.\nStart with mpirun -n N_WORKER_NODES+1 tessts")
        sys.exit(1)

    ddata = args.data_dir
    if not ddata.exists():
        raise FileNotFoundError(f"The data directory  {ddir} doesn't exist")

    # Master node
    # -----------
    if is_root:
        files = sorted(ddata.glob('*.fits'))[args.start_i:args.end_i]
        free_workers = list(range(1, size))
        active_workers = []

        n_files = len(files)
        n_finished_files = 0
        while files or active_workers:
            while files and free_workers:
                w = free_workers.pop(0)
                comm.send(files.pop(0), dest=w, tag=0)
                active_workers.append(w)

            for w in active_workers:
                if comm.Iprobe(w, 2):
                    free_workers.append(w)
                    active_workers.remove(w)
                    n_finished_files += 1

        for w in free_workers:
            comm.send(-1, dest=w, tag=0)

    # Worker node
    # -----------
    else:
        while True:
            fname = comm.recv(source=root, tag=0)
            if fname == -1:
                break

            ts = TESSTransitSearch()
            ts.read_data(fname)
            ts.run()

            f = ts._create_fits()
            f.writeto(args.save_dir / f"{ts.name}_{ts.planet}.fits", overwrite=True)

            if args.plot:
                fig = ts.plot_report()
                fig.savefig(args.plot_dir / f"{ts.name}_{ts.planet}_SNR_{ts.snr:05.0f}.png")

            comm.send(1, dest=root, tag=2)

